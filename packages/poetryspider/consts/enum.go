// Code generated by "gonum -types=PoetryPlatformEnum"; DO NOT EDIT.
// See https://github.com/steinfletcher/gonum
package consts

import "encoding/json"
import "errors"
import "fmt"

type poetryPlatformInstanceJsonDescriptionModel struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

var poetryPlatformInstance = PoetryPlatformEnum{
	ZHSC: "zhsc",
}

// PoetryPlatform is the enum that instances should be created from
type PoetryPlatform struct {
	name        string
	value       string
	description string
}

// Enum instances
var ZHSC = PoetryPlatform{name: "zhsc", value: "ZHSC", description: "中华诗词"}

// NewPoetryPlatform generates a new PoetryPlatform from the given display value (name)
func NewPoetryPlatform(value string) (PoetryPlatform, error) {
	switch value {
	case "zhsc":
		return ZHSC, nil
	default:
		return PoetryPlatform{}, errors.New(
			fmt.Sprintf("'%s' is not a valid value for type", value))
	}
}

// Name returns the enum display value
func (g PoetryPlatform) Name() string {
	switch g {
	case ZHSC:
		return ZHSC.name
	default:
		return ""
	}
}

// String returns the enum display value and is an alias of Name to implement the Stringer interface
func (g PoetryPlatform) String() string {
	return g.Name()
}

// Error returns the enum name and implements the Error interface
func (g PoetryPlatform) Error() string {
	return g.Name()
}

// Description returns the enum description if present. If no description is defined an empty string is returned
func (g PoetryPlatform) Description() string {
	switch g {
	case ZHSC:
		return "中华诗词"
	default:
		return ""
	}
}

// PoetryPlatformNames returns the displays values of all enum instances as a slice
func PoetryPlatformNames() []string {
	return []string{
		"zhsc",
	}
}

// PoetryPlatformValues returns all enum instances as a slice
func PoetryPlatformValues() []PoetryPlatform {
	return []PoetryPlatform{
		ZHSC,
	}
}

// MarshalJSON provides json serialization support by implementing the Marshaler interface
func (g PoetryPlatform) MarshalJSON() ([]byte, error) {
	if g.Description() != "" {
		m := poetryPlatformInstanceJsonDescriptionModel{
			Name:        g.Name(),
			Description: g.Description(),
		}
		return json.Marshal(m)
	}
	return json.Marshal(g.Name())
}

// UnmarshalJSON provides json deserialization support by implementing the Unmarshaler interface
func (g *PoetryPlatform) UnmarshalJSON(b []byte) error {
	var v interface{}
	err := json.Unmarshal(b, &v)
	if err != nil {
		return err
	}

	var value string
	switch v.(type) {
	case map[string]interface{}:
		value = v.(map[string]interface{})["name"].(string)
	case string:
		value = v.(string)
	}

	instance, createErr := NewPoetryPlatform(value)
	if createErr != nil {
		return createErr
	}

	g.name = instance.name
	g.value = instance.value
	g.description = instance.description

	return nil
}
